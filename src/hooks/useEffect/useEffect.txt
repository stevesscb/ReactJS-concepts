1. What is the useEffect hook?

  - useEffect is a React Hook that lets you synchronize a component with an external system.
    eg useEffect(() => { ... }, [ dependencies ])

PARAMETERS:
  setup: The function with your Effectâ€™s logic. Your setup function may also optionally return a cleanup function. When your component is added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. After your component is removed from the DOM, React will run your cleanup function.

  optional dependencies: The list of all reactive values referenced inside of the setup code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is configured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like [dep1, dep2, dep3]. React will compare each dependency with its previous value using the Object.is comparison. If you omit this argument, your Effect will re-run after every re-render of the component. See the difference between passing an array of dependencies, an empty array, and no dependencies at all.

1.1 What is the setTimeOut function?

  - This function is to be used inside the useEffect function. It will fire every so often given the time you provide it in milliseconds.
  eg setTimeOut(() => {
    console.lgo('This will fire every 500 milliseconds')
  }, 500)

1.2 What is the useEffect cleanup function?

  - The cleanup function will remove (clean) the last values produced before the next run of the useEffect function. This ensures there is not a build up of values/requests which would slow the operation time.

    eg return () => {
      clearTimeout( '..function name..' )
    }

3. When to use the useEffect hook?

  - When you aren't handling something that is render related..
  - Most common use is for HTTP requests.
